AWSTemplateFormatVersion: '2010-09-09'
Description: Resources for Book My Cab photo processing workflow.
Transform: AWS::Serverless-2016-10-31
Resources:
  BookMyCabS3Bucket:
    Type: AWS::S3::Bucket
  ThumbnailS3Bucket:
    Type: AWS::S3::Bucket
  FaceDetectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: face_detection
      Description: Lambda function to detect faces using Amazon Rekognition
      Handler: face_detection.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 10
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BookMyCabS3Bucket}/*
        - Sid: RekognitionFace
          Effect: Allow
          Action:
          - rekognition:DetectFaces
          Resource: '*'
      CodeUri: s3://rekognition-test-1/d018b3835236191bdab8b68da320c7dd
      Environment:
        Variables:
          IMAGE_BUCKET_NAME:
            Ref: BookMyCabS3Bucket
  FailureNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: failure_notification
      Description: Lambda function to send failure notifications to the user
      Handler: failure_notification.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 10
      CodeUri: s3://rekognition-test-1/e32694b23d0d7269c2027d420332859d
  FaceSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: face_search
      Description: Lambda function to search for a face in the collection
      Handler: face_search.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 10
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BookMyCabS3Bucket}/*
        - Sid: SearchFace
          Effect: Allow
          Action:
          - rekognition:SearchFacesByImage
          Resource: '*'
      CodeUri: s3://rekognition-test-1/68e99d8e88dafd8c7a14794d0adb5ba9
      Environment:
        Variables:
          IMAGE_BUCKET_NAME:
            Ref: BookMyCabS3Bucket
  IndexFaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: index_face
      Description: Lambda function to index faces using Amazon Rekognition
      Handler: index_face.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 10
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BookMyCabS3Bucket}/*
        - Sid: SearchFace
          Effect: Allow
          Action:
          - rekognition:IndexFaces
          Resource: '*'
      CodeUri: s3://rekognition-test-1/1adc8baaf0084e64b382ea40f8db38f9
      Environment:
        Variables:
          IMAGE_BUCKET_NAME:
            Ref: BookMyCabS3Bucket
  ThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create_thumbnail
      Handler: create_thumbnail.lambda_handler
      Runtime: python3.7
      MemorySize: 1536
      Timeout: 60
      Layers:
      - arn:aws:lambda:us-west-2:113088814899:layer:Klayers-python37-Pillow:11
      Policies:
        Statement:
        - Sid: WritetoS3ThumbnailBucket
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${ThumbnailS3Bucket}/*
        - Sid: ReadFromS3
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BookMyCabS3Bucket}/*
      CodeUri: s3://rekognition-test-1/0ce780191b52da158075c89fc2385f42
      Environment:
        Variables:
          IMAGE_BUCKET_NAME:
            Ref: BookMyCabS3Bucket
          THUMBNAIL_BUCKET_NAME:
            Ref: ThumbnailS3Bucket
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: InvokeLambda
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
Outputs:
  FaceDetectionFunctionArn:
    Value:
      Fn::GetAtt:
      - FaceDetectionFunction
      - Arn
  NotificationPlaceholderFunctionArn:
    Value:
      Fn::GetAtt:
      - FailureNotificationFunction
      - Arn
  FaceSearchFunctionArn:
    Value:
      Fn::GetAtt:
      - FaceSearchFunction
      - Arn
  IndexFaceFunctionArn:
    Value:
      Fn::GetAtt:
      - IndexFaceFunction
      - Arn
  ThumbnailFunctionArn:
    Value:
      Fn::GetAtt:
      - ThumbnailFunction
      - Arn
  BookCabS3Bucket:
    Value:
      Ref: BookMyCabS3Bucket
  ThumbnailS3Bucket:
    Value:
      Ref: ThumbnailS3Bucket
  StateMachineRole:
    Value:
      Fn::GetAtt:
      - StateMachineRole
      - Arn
